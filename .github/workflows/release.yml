name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.2.1)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            artifact_name: crux
            binary_path: build/crux
            cmake_flags: ""
            
          - os: windows-latest
            platform: windows
            arch: amd64
            artifact_name: crux.exe
            binary_path: build/crux.exe
            cmake_generator: "MinGW Makefiles"
            cmake_flags: ""
            
          - os: macos-latest
            platform: macos
            arch: amd64
            artifact_name: crux
            binary_path: build/crux
            cmake_flags: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
            
          - os: macos-latest
            platform: macos
            arch: arm64
            artifact_name: crux
            binary_path: build/crux
            cmake_flags: "-DCMAKE_OSX_ARCHITECTURES=arm64"

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Install GCC (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV

      - name: Setup GCC (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gcc
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV    

      - name: Install MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64

      - name: Setup GCC environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "CC=gcc" >> $env:GITHUB_ENV
          echo "CXX=g++" >> $env:GITHUB_ENV

      - name: Build Linux/macOS
        if: matrix.os != 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_flags }} ../src
          cmake --build . --config Release

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir build
          cd build
          cmake -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_flags }} ../src
          cmake --build . --config Release

      - name: Rename binary
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            mv ${{ matrix.binary_path }} crux-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            mv ${{ matrix.binary_path }} crux-${{ matrix.platform }}-${{ matrix.arch }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: crux-${{ matrix.platform }}-${{ matrix.arch }}
          path: crux-${{ matrix.platform }}-${{ matrix.arch }}*
          retention-days: 1

  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ inputs.version }}
          name: Release v${{ inputs.version }}
          files: |
            crux-*/*
          token: ${{ secrets.GITHUB_TOKEN }}