// Testing the type function

println("=== Testing the type function ===");

let a = "string";
let b = 1;
let c = true;
let d = nil;
let e = [1, 2, 3];
let f = {a: 1, b: 2};
let g = fn (test) { return test; };
class Test {}
let h = Test();
let j = len(e);
let k = 1.0;

let aType = type(a);
let bType = type(b);
let cType = type(c);
let dType = type(d);
let eType = type(e);
let fType = type(f);
let gType = type(g);
let hType = type(h);
let iType = type(Test);
let jType = type(j);
let kType = type(k);

assert(aType == "string", "aType is not string");
assert(bType == "int", "bType is not an integer");
assert(cType == "boolean", "cType is not boolean");
assert(dType == "nil", "dType is not nil");
assert(eType == "array", "eType is not array");
assert(fType == "table", "fType is not table");
assert(gType == "function", "gType is not function");
assert(hType == "instance", "hType is not instance");
assert(iType == "class", "iType is not class");
assert(jType == "result", "jType is not result");
assert(kType == "float", "k is not a float");

println("aType: " + aType);
println("bType: " + bType);
println("cType: " + cType);
println("dType: " + dType);
println("eType: " + eType);
println("fType: " + fType);
println("gType: " + gType);
println("hType: " + hType);
println("iType: " + iType);
println("jType: " + jType);

println("=== type function test complete ===");