println("=== Start of testing functions ===");

// Do simple functions work
fn simple() {
	return 1;
}
let t1 = simple();
assert(t1 == 1, "Function simple failed to return value. Got: " + t1);

// Can functions take 1 argument
fn with_arg(arg) {
	return 1;
}
let t2 = with_arg(1);
assert(t2 == 1, "Function with_arg failed to return value. Got: " + t2);

// Can functions return the argument that they consumed
fn return_arg(arg) {
	return arg;
}
let arg = "test";
let t3 = return_arg(arg);
assert(arg == t3, "Function return_arg failed to return argument. Got: " + t3);


// Can functions take multiple arguments
fn add_two(a, b) {
	return a + b;
}
let t4 = add_two(5, 3);
assert(t4 == 8, "Function add_two failed. Expected 8, got: " + t4);

fn concat_three(a, b, c) {
	return a + b + c;
}

let t5 = concat_three("Hello", " ", "World");
assert(t5 == "Hello World", "Function concat_three failed. Got: " + t5);

// Can functions take arguments of different types
fn multiply(x, y) {
	return x * y;
}

let t6 = multiply(4, 2.5);
assert(t6 == 10, "Function multiply failed. Expected 10, got: " + t6);


// Can functions correctly return values from calls in return statement
fn string_length(str) {
	return len(str)._unwrap();
}

let t7 = string_length("testing");
assert(t7 == 7, "Function string_length failed. Expected 7, got: " + t7);

// Can we return from a match statement
fn length(str) {
	return match len(str) {
		Ok(v) => { give v; }
		Err => { give -1; }
	};
}

let t7_5 = length("test");
assert(t7_5 == 4, "Failed to return with match statement. Expected 4, Got: " + t7_5);

// Functions with conditional logic
fn max_value(a, b) {
	if (a > b) {
		return a;
	} else {
		return b;
	}
}

let t8 = max_value(10, 5);
assert(t8 == 10, "Function max_value failed. Expected 10, got: " + t8);

let t9 = max_value(3, 7);
assert(t9 == 7, "Function max_value failed. Expected 7, got: " + t9);

// Functions with loops
fn factorial(n) {
	let result = 1;
	let i = 1;
	while (i <= n) {
		result = result * i;
		i = i + 1;
	}
	return result;
}

let t10 = factorial(5);
assert(t10 == 120, "Function factorial failed. Expected 120, got: " + t10);

// Recursive functions
fn fibonacci(n) {
	if (n <= 1) {
		return n;
	}
	return fibonacci(n - 1) + fibonacci(n - 2);
}

let t11 = fibonacci(6);
assert(t11 == 8, "Function fibonacci failed. Expected 8, got: " + t11);

// Functions returning different types
fn get_boolean(value) {
	return value > 0;
}

let t12 = get_boolean(5);
assert(t12 == true, "Function get_boolean failed. Expected true, got: " + t12);

let t13 = get_boolean(-3);
assert(t13 == false, "Function get_boolean failed. Expected false, got: " + t13);

// Functions with no explicit return (should return undefined/null)
fn no_return() {
	let x = 5;
}

let t14 = no_return();
assert(t14 == nil, "Function no_return should return nil. Got: " + t14);

// Functions modifying external variables
let global_counter = 0;

fn increment_counter() {
	global_counter = global_counter + 1;
	return global_counter;
}

let t15 = increment_counter();
assert(t15 == 1, "Function increment_counter failed. Expected 1, got: " + t15);
assert(global_counter == 1, "Global counter not modified. Expected 1, got: " + global_counter);

// Nested function calls
fn double(x) {
	return x * 2;
}

fn square(x) {
	return x * x;
}

let t16 = double(square(3));
assert(t16 == 18, "Nested function calls failed. Expected 18, got: " + t16);

// Functions with parameter checking
fn safe_divide(a, b) {
	if (b == 0) {
		return "Cannot divide by zero";
	}
	return a / b;
}

let t17 = safe_divide(10, 2);
assert(t17 == 5, "Function safe_divide failed. Expected 5, got: " + t17);

let t18 = safe_divide(10, 0);
assert(t18 == "Cannot divide by zero", "Function safe_divide failed. Expected error message, got: " + t18);

// Functions with array parameters
fn sum_array(arr) {
	let sum = 0;
	let i = 0;
	while i < len(arr)._unwrap()  {
		sum = sum + arr[i];
		i = i + 1;
	}
	return sum;
}

let test_array = [1, 2, 3, 4, 5];
let t19 = sum_array(test_array);
assert(t19 == 15, "Function sum_array failed. Expected 15, got: " + t19);

// Function as variable assignment
fn multiply_by_three(x) {
	return x * 3;
}

let func_var = multiply_by_three;
let t20 = func_var(4);
assert(t20 == 12, "Function variable assignment failed. Expected 12, got: " + t20);

// Functions with early return
fn find_first_positive(arr) {
	let i = 0;
	while (i < len(arr)._unwrap()) {
		if (arr[i] > 0) {
			return arr[i];
		}
		i = i + 1;
	}
	return -1;
}

let mixed_array = [-3, -1, 0, 2, 5];
let t21 = find_first_positive(mixed_array);
assert(t21 == 2, "Function find_first_positive failed. Expected 2, got: " + t21);

// Do closures work correctly
fn make_counter() {
	let count = 0;

	fn counter() {
		count += 1;
		return count;
	}
	return counter;
}

let counter = make_counter();
counter();
counter();
counter();
let t22 = counter();

assert( t22 == 4, "Failed to correctly update closed value. Expected 4, got: " + t22 );

println("=== End of testing functions ===");
