// Testing the type function

use Random from "crux:random";

println("=== Testing the type function ===");

let a = "string";
let b = 1;
let c = true;
let d = nil;
let e = [1, 2, 3];
let f = {a: 1, b: 2};
let g = fn (test) { return test; };
struct Test {}
let h = Test {};
let j = len(e);
let k = 1.0;
let r = Random();

let aType = typeof a;
let bType = typeof b;
let cType = typeof c;
let dType = typeof d;
let eType = typeof e;
let fType = typeof f;
let gType = typeof g;
let hType = typeof h;
let iType = typeof Test;
let jType = typeof j;
let kType = typeof k;
let rType = typeof r;

assert(aType == "string", "a is not string");
assert(bType == "int", "b is not an integer");
assert(cType == "boolean", "c is not boolean");
assert(dType == "nil", "d is not nil");
assert(eType == "array", "e is not array");
assert(fType == "table", "f is not table");
assert(gType == "function", "g is not function");
assert(hType == "struct instance", "h is not a struct instance");
assert(iType == "struct", "i is not struct");
assert(jType == "result", "j is not result");
assert(kType == "float", "k is not a float");
assert(rType == "random", "r is not a Random");

println("=== type function test complete ===");
