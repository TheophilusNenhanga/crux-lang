println("===  Start of testing continue statement  ===");

println("--- Testing basic continue in while loop ---");
let a = 0;
let a_sum = 0;
let a_iterations = 0;
while a < 5 {
    a_iterations += 1;
    a += 1; // Increment first: a becomes 1, 2, 3, 4, 5
    if (a % 2 == 0) {
        continue; // Skip even numbers (2, 4)
    }
    a_sum += a; // Add odd numbers: 1, 3, 5
}
assert(a == 5, "Basic continue: Expected a to be 5 but got ".concat(_string(a))?);
assert(a_sum == 9, "Basic continue: Expected a_sum to be 9 (1+3+5) but got ".concat(_string(a_sum))?);
assert(a_iterations == 5, "Basic continue: Expected 5 iterations but got ".concat(_string(a_iterations))?);

println("--- Testing continue in first iteration ---");
let b = 0;
let b_sum = 0;
let b_total_iterations = 0;
while b < 3 {
    b_total_iterations += 1;
    if (b == 0) {
        b += 1;
        continue;
    }
    b_sum += b; // Should sum 1, 2
    b += 1;
}
assert(b == 3, "Continue first iteration: Expected b to be 3 but got ".concat(_string(b))?);
assert(b_sum == 3, "Continue first iteration: Expected b_sum to be 3 (1+2) but got ".concat(_string(b_sum))?);
assert(b_total_iterations == 3, "Continue first iteration: Expected 3 total iterations but got ".concat(_string(b_total_iterations))?);

println("--- Testing continue with multiple conditions ---");
let c = 0;
let c_processed = 0;
let c_sum = 0;
while c < 10 {
    c += 1; // c becomes 1, 2, 3, ..., 10
    if (c % 3 == 0) {
        continue; // Skip multiples of 3: 3, 6, 9
    }
    if (c % 5 == 0) {
        continue; // Skip multiples of 5: 5, 10
    }
    c_processed += 1;
    c_sum += c; // Process: 1, 2, 4, 7, 8
}
assert(c == 10, "Continue multiple conditions: Expected c to be 10 but got ".concat(_string(c))?);
assert(c_processed == 5, "Continue multiple conditions: Expected 5 processed numbers but got ".concat(_string(c_processed))?);
assert(c_sum == 22, "Continue multiple conditions: Expected c_sum to be 22 (1+2+4+7+8) but got ".concat(_string(c_sum))?);

println("--- Testing continue in nested while loops (inner continue) ---");
let d_outer = 0;
let d_inner_processed = 0;
let d_inner_skipped = 0;
while d_outer < 2 { // Outer: 0, 1
    let d_inner = 0;
    while d_inner < 4 { // Inner: 0, 1, 2, 3
        d_inner += 1; // d_inner becomes 1, 2, 3, 4
        if (d_inner % 2 == 0) {
            d_inner_skipped += 1;
            continue; // Skip even numbers
        }
        d_inner_processed += 1; // Count odd numbers
    }
    d_outer += 1;
}
assert(d_outer == 2, "Nested continue (inner): Expected d_outer to be 2 but got ".concat(_string(d_outer))?);
assert(d_inner_processed == 4, "Nested continue (inner): Expected 4 processed (2 outer * 2 odd per inner) but got ".concat(_string(d_inner_processed))?);
assert(d_inner_skipped == 4, "Nested continue (inner): Expected 4 skipped (2 outer * 2 even per inner) but got ".concat(_string(d_inner_skipped))?);

println("--- Testing continue doesn't skip loop increment ---");
let e = 0;
let e_processed_count = 0;
let e_continue_count = 0;
while e < 6 {
    if (e < 3) {
        e_continue_count += 1;
        e += 1; // Important: increment before continue
        continue;
    }
    e_processed_count += 1;
    e += 1;
}
assert(e == 6, "Continue with increment: Expected e to be 6 but got ".concat(_string(e))?);
assert(e_continue_count == 3, "Continue with increment: Expected 3 continues but got ".concat(_string(e_continue_count))?);
assert(e_processed_count == 3, "Continue with increment: Expected 3 processed but got ".concat(_string(e_processed_count))?);

println("--- Testing continue with complex logic ---");
let f = 0;
let f_sum_special = 0;
let f_count_special = 0;
while f < 20 {
    f += 1;
    if (f % 2 == 0) {
        continue; // Skip even numbers
    }
    if (f % 3 == 0) {
        continue; // Skip multiples of 3
    }
    // Process numbers that are odd AND not multiples of 3
    // Processed: 1, 5, 7, 11, 13, 17, 19
    f_sum_special += f;
    f_count_special += 1;
}
assert(f == 20, "Continue complex logic: Expected f to be 20 but got ".concat(_string(f))?);
assert(f_count_special == 7, "Continue complex logic: Expected 7 special numbers but got ".concat(_string(f_count_special))?);
assert(f_sum_special == 73, "Continue complex logic: Expected f_sum_special to be 73 but got ".concat(_string(f_sum_special))?);

println("--- Testing continue with variable modification ---");
let g = 0;
let g_modified_sum = 0;
let g_unmodified_sum = 0;
while g < 8 {
    g += 1;
    if (g % 4 == 0) { // g = 4, 8
        let temp = g * 2;
        g_modified_sum += temp;
        continue;
    }
    g_unmodified_sum += g; // g = 1, 2, 3, 5, 6, 7
}
assert(g == 8, "Continue with modification: Expected g to be 8 but got ".concat(_string(g))?);
assert(g_modified_sum == 24, "Continue with modification: Expected g_modified_sum to be 24 (8+16) but got ".concat(_string(g_modified_sum))?);
assert(g_unmodified_sum == 24, "Continue with modification: Expected g_unmodified_sum to be 24 (1+2+3+5+6+7) but got ".concat(_string(g_unmodified_sum))?);

println("--- Testing continue in while true loop ---");
let h = 0;
let h_processed = 0;
let h_safety = 0;
while true {
    h += 1;
    h_safety += 1;
    if (h_safety > 15) { // Safety break
        break;
    }
    if (h <= 5) {
        continue;
    }
    h_processed += 1;
    if (h >= 10) {
        break;
    }
}
assert(h == 10, "Continue in while true: Expected h to be 10 but got ".concat(_string(h))?);
assert(h_processed == 5, "Continue in while true: Expected 4 processed (6,7,8,9) but got ".concat(_string(h_processed))?);

println("--- Testing continue doesn't affect outer scope ---");
let i_outer = 0;
let i_outer_sum = 0;
while i_outer < 4 {
    i_outer += 1;
    let i_inner = i_outer * 10;
    if (i_outer == 2) {
        i_inner = 999; // Modify inner variable
        continue; // Skip adding to sum
    }
    i_outer_sum += i_outer; // Add 1, 3, 4 (skip 2)
}
assert(i_outer == 4, "Continue scope: Expected i_outer to be 4 but got ".concat(_string(i_outer))?);
assert(i_outer_sum == 8, "Continue scope: Expected i_outer_sum to be 8 (1+3+4) but got ".concat(_string(i_outer_sum))?);

println("--- Testing continue after other statements ---");
let j = 0;
let j_even_sum = 0;
let j_odd_count = 0;
while j < 12 {
    j += 1;
    if (j % 2 == 0) {
        j_even_sum += j; // Process even numbers
        continue;
    }
    // This section only executes for odd numbers
    j_odd_count += 1;
    if (j > 7) {
        continue; // Skip odd numbers greater than 7
    }
    // Additional processing for odd numbers <= 7 would go here
}
assert(j == 12, "Continue after statements: Expected j to be 12 but got ".concat(_string(j))?);
assert(j_even_sum == 42, "Continue after statements: Expected j_even_sum to be 42 (2+4+6+8+10+12) but got ".concat(_string(j_even_sum))?);
assert(j_odd_count == 6, "Continue after statements: Expected 6 odd numbers but got ".concat(_string(j_odd_count))?);

println("===  End of testing continue statement  ===");
