println("===  Start of testing while loops  ===");

println("--- Testing basic while loop ---");
let a = 0;
while a < 5 {
    a += 1;
}
assert(a == 5, "Basic While: Expected a to be 5 but got ".concat(_string(a))?);

println("--- Testing while loop that executes once ---");
let b = 0;
while b < 1 {
    b += 1;
}
assert(b == 1, "While (one iteration): Expected b to be 1 but got ".concat(_string(b))?);

println("--- Testing while loop that never executes ---");
let c = 5;
let c_executed = false;
while c < 5 {
    c_executed = true;
    c += 1;
}
assert(c == 5, "While (zero iterations): Expected c to remain 5 but got ".concat(_string(c))?);
assert(c_executed == false, "While (zero iterations): Loop body executed when it shouldn't have.");

println("--- Testing while loop with '>=' condition and decrement ---");
let d = 3;
let d_iterations = 0;
while d >= 0 { // 3, 2, 1, 0
    d -= 1;
    d_iterations += 1;
}
assert(d == -1, "While (decrement, >=): Expected d to be -1 but got ".concat(_string(d))?);
assert(d_iterations == 4, "While (decrement, >=): Expected 4 iterations but got ".concat(_string(d_iterations))?);

println("--- Testing while loop with '!=' condition ---");
let e = 0;
let target_e = 3;
while e != target_e {
    e += 1;
    if (e > 10) {
        assert(false, "While (!=): Safety break hit, loop likely not progressing as expected.");
        break;
    }
}
assert(e == target_e, "While (!=): Expected e to be ".concat(_string(target_e))?.concat(" but got ")?.concat(_string(e))?);


println("--- Testing 'break' in while loop ---");
let f = 0;
let f_sum = 0;
while f < 10 {
    if (f == 3) {
        break;
    }
    f_sum += f; // Sums 0, 1, 2
    f += 1;
}
assert(f == 3, "While (break): Expected f to be 3 (value at break) but got ".concat(_string(f))?);
assert(f_sum == 3, "While (break): Expected f_sum to be 3 (0+1+2) but got ".concat(_string(f_sum))?);


println("--- Testing 'continue' in while loop ---");
let g = 0;
let g_sum = 0;
let g_iterations = 0;
while g < 5 { // g will be 0, 1, 2, 3, 4
    g_iterations +=1;
    g += 1; // Increment g *before* continue check to avoid infinite loop if g starts at a skip value
    if (g % 2 == 0) {
        continue;
    }
    // g values that reach here after increment: 1, 3, 5
    g_sum += g;
}
assert(g == 5, "While (continue): Expected g to be 5 but got ".concat(_string(g))?);
assert(g_sum == 9, "While (continue): Expected sum of processed values to be 9 but got ".concat(_string(g_sum))?); // 1 (g=1) + 3 (g=3) + 5 (g=5)
assert(g_iterations == 5, "While (continue): Expected 5 total iterations but got ".concat(_string(g_iterations))?);


println("--- Testing nested while loops ---");
let outer_count = 0;
let inner_total_count = 0;
let h_outer = 0;
while h_outer < 2 { // Outer loop: 0, 1
    outer_count += 1;
    let h_inner = 0;
    while h_inner < 3 { // Inner loop: 0, 1, 2
        inner_total_count += 1;
        h_inner += 1;
    }
    h_outer += 1;
}
assert(outer_count == 2, "Nested While: Expected outer_count to be 2 but got ".concat(_string(outer_count))?);
assert(inner_total_count == 6, "Nested While: Expected inner_total_count to be 6 (2*3) but got ".concat(_string(inner_total_count))?);
println("--- Testing 'while true' with break ---");
let i = 0;
let i_iterations = 0;
while true { // or `while 1` if numbers are truthy and `true` isn't a keyword
    i += 1;
    i_iterations += 1;
    if (i >= 4) {
        break;
    }
    if (i_iterations > 100) { // Safety break
        assert(false, "While (true with break): Safety break hit.");
        break;
    }
}
assert(i == 4, "While (true with break): Expected i to be 4 but got ".concat(_string(i))?);
assert(i_iterations == 4, "While (true with break): Expected 4 iterations but got ".concat(_string(i_iterations))?);

println("--- Testing scoping of variables declared inside while ---");
let k_outer = 0;
let sum_inner_k = 0;
while k_outer < 2 { // k_outer = 0, 1
    let k_inner = k_outer * 10;
    sum_inner_k += k_inner;
    k_outer += 1;
}
assert(k_outer == 2, "While (scoping): Expected k_outer to be 2 but got ".concat(_string(k_outer))?);
assert(sum_inner_k == 10, "While (scoping): Expected sum_inner_k to be 10 (0+10) but got ".concat(_string(sum_inner_k))?);

// --- Test with a more complex condition ---

// TODO: This test does not work --- for some reason y becomes negative 9 after first iteration

//println("--- Testing while loop with complex condition ---");
//let x = 0;
//let y = 10;
//println(y);
//let iterations_complex = 0;
//while x < y {
//    x += 1;
//    y -= 1;
//    println(y);
//    iterations_complex += 1;
//    format("Iteration {iter}: x={x}, y={y}\n", {"iter": iterations_complex, "x": x, "y": y});
//}
//assert(x == 5, "While (complex condition): Expected x to be 5 but got ".concat(_string(x))?);
//assert(y == 5, "While (complex condition): Expected y to be 5 but got ".concat(_string(y))?);
//assert(iterations_complex == 5, "While (complex condition): Expected 5 iterations but got ".concat(_string(iterations_complex))?);

println("===  End of testing while loops  ===");
