use Vec from "crux:vectors";

// Testing Creating new vectors
println("=== Testing creating a vector with 4 dimensions ===");
let v4 = Vec(4, [1, 2, 3, 4])?;
let v4_2 = Vec(4, [4, 3, 2, 1])?;
assert(typeof v4 == "vec", "Failed to create vector with dimension 4");
assert(typeof v4_2 == "vec", "Failed to create vector with dimension 4");

println("=== Testing creating a vector with 8 dimensions ===");
let v8 = Vec(8, [1, 2, 3, 4, 5, 6, 7, 8])?;
let v8_2 = Vec(8, [8, 7, 6, 5, 4, 3, 2, 1])?;
assert(typeof v8 == "vec", "Failed to create vector with dimension 8");
assert(typeof v8_2 == "vec", "Failed to create vector with dimension 8");

// Testing the equals method. If equals does not work then the rest of the tests will fail.
println("=== Testing the equals method with dimension 4 ===");
assert(v4.equals(v4_2) == true, "Failed to compare vectors");

println("=== Testing the equals method with dimension 8 ===");
assert(v8.equals(v8_2) == true, "Failed to compare vectors");

// Testing the dot method
println("=== Testing the dot method with dimension 4 ===");
assert(v4.dot(v4_2) == 30, "Failed to calculate dot product");

println("=== Testing the dot method with dimension 8 ===");
assert(v8.dot(v8_2) == 120, "Failed to calculate dot product");

println("=== Testing the add method with dimension 4 ===");
let add_result4 = Vec(4, [5, 5, 5, 5])?;
assert(add_result4.equals(v4.add(v4_2)?)?, "Failed to add vectors");

println("=== Testing the add method with dimension 8 ===");
let add_result8 = Vec(8, [5, 5, 5, 5, 5, 5, 5, 5])?;
assert(add_result8.equals(v8.add(v8_2)?)?, "Failed to add vectors");

println("=== Testing the subtract method with dimension 4 ===");
let subtract_result4 = Vec(4, [-3, -1, 1, 3])?;
assert(subtract_result4.equals(v4.subtract(v4_2)?)?, "Failed to subtract vectors");

println("=== Testing the subtract method with dimension 8 ===");
let subtract_result8 = Vec(8, [-7, -5, -3, -1, 1, 3, 5, 7])?;
assert(subtract_result8.equals(v8.subtract(v8_2)?)?, "Failed to subtract vectors");

println("=== Testing the multiply method with dimension 4 ===");
let multiply_result4 = Vec(4, [2, 4, 6, 8])?;
assert(multiply_result4.equals(v4.multiply(2)?)?, "Failed to multiply vector");

println("=== Testing the multiply method with dimension 8 ===");
let multiply_result8 = Vec(8, [2, 4, 6, 8, 10, 12, 14, 16])?;
assert(multiply_result8.equals(v8.multiply(2)?)?, "Failed to multiply vector");

println("=== Testing the divide method with dimension 4 ===");
let divide_result4 = Vec(4, [0.5, 1, 1.5, 2])?;
assert(divide_result4.equals(v4.divide(2)?)?, "Failed to divide vector");

println("=== Testing the divide method with dimension 8 ===");
let divide_result8 = Vec(8, [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4])?;
assert(divide_result8.equals(v8.divide(2)?)?, "Failed to divide vector");

println("=== Testing the magnitude method with dimension 4 ===");
assert(v4.magnitude()? == 5.477225575051661, "Failed to calculate magnitude");

println("=== Testing the magnitude method with dimension 8 ===");
assert(v8.magnitude()? == 11.313708498984761, "Failed to calculate magnitude");

println("=== Testing the normalize method with dimension 4 ===");
let normalize_result4 = Vec(4, [0.4, 0.8, 1.2, 1.6]);
assert(normalize_result4.equals(v4.normalize()?)?, "Failed to normalize vector");

println("=== Testing the normalize method with dimension 8 ===");
let normalize_result8 = Vec(8, [0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2]);
assert(normalize_result8.equals(v8.normalize()?)?, "Failed to normalize vector");

println("=== Testing the distance method with dimension 4 ===");
assert(v4.distance(v4_2)? == 5.656854249492381, "Failed to calculate distance");

println("=== Testing the distance method with dimension 8 ===");
assert(v8.distance(v8_2)? == 12.649110640673518, "Failed to calculate distance");

println("=== Testing the cross method with dimension 4 ===");
let cross_result4 = Vec(4, [0.0, 0.0, 0.0, 0.0]);
assert(cross_result4.equals(v4.cross(v4_2)?)?, "Failed to calculate cross product");

println("=== Testing the cross method with dimension 8 ===");
let cross_result8 = Vec(8, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
assert(cross_result8.equals(v8.cross(v8_2)?)?, "Failed to calculate cross product");

println("=== Testing the angle_between method with dimension 4 ===");
assert(v4.angle_between(v4_2)? == 0.0, "Failed to calculate angle between vectors");

println("=== Testing the angle_between method with dimension 8 ===");
assert(v8.angle_between(v8_2)? == 0.0, "Failed to calculate angle between vectors");

println("=== Testing the lerp method with dimension 4 ===");
let lerp_result4 = Vec(4, [1.0, 2.0, 3.0, 4.0]);
assert(lerp_result4.equals(v4.lerp(v4_2, 0.5)?)?, "Failed to calculate linear interpolation");

println("=== Testing the lerp method with dimension 8 ===");
let lerp_result8 = Vec(8, [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]);
assert(lerp_result8.equals(v8.lerp(v8_2, 0.5)?)?, "Failed to calculate linear interpolation");

println("=== Testing the reflect method with dimension 4 ===");
let reflect_result4 = Vec(4, [1.0, 2.0, 3.0, 4.0]);
assert(reflect_result4.equals(v4.reflect(v4_2)?)?, "Failed to calculate reflection");

println("=== Testing the reflect method with dimension 8 ===");
let reflect_result8 = Vec(8, [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]);
assert(reflect_result8.equals(v8.reflect(v8_2)?)?, "Failed to calculate reflection");

println("=== Testing the x method with dimension 4 ===");
assert(v4.x() == 1.0, "Failed to get x component");

println("=== Testing the x method with dimension 8 ===");
assert(v8.x() == 1.0, "Failed to get x component");

println("=== Testing the y method with dimension 4 ===");
assert(v4.y() == 2.0, "Failed to get y component");

println("=== Testing the y method with dimension 8 ===");
assert(v8.y() == 2.0, "Failed to get y component");

println("=== Testing the z method with dimension 4 ===");
assert(v4.z() == 3.0, "Failed to get z component");

println("=== Testing the z method with dimension 8 ===");
assert(v8.z() == 3.0, "Failed to get z component");

println("=== Testing the w method with dimension 4 ===");
assert(v4.w() == 4.0, "Failed to get w component");

println("=== Testing the w method with dimension 8 ===");
assert(v8.w() == 4.0, "Failed to get w component");

println("=== Testing the dimension method with dimension 4 ===");
assert(v4.dimension() == 4, "Failed to get dimension");

println("=== Testing the dimension method with dimension 8 ===");
assert(v8.dimension() == 8, "Failed to get dimension");
